const fs = require('fs');
const path = require('path');
const getDatabase = require('../config/database');

// Script para criar tabelas de sincroniza√ß√£o entre dispositivos
async function createDeviceSyncTables() {
    const db = getDatabase();
    
    try {
        // Tabela para gerenciar dispositivos dos usu√°rios
        const createDevicesTable = `
            CREATE TABLE IF NOT EXISTS user_devices (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                device_id TEXT UNIQUE NOT NULL,
                device_name TEXT NOT NULL,
                device_type TEXT NOT NULL, -- 'mobile', 'desktop', 'tablet'
                browser_info TEXT,
                ip_address TEXT,
                last_sync DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
            )
        `;
        
        // Tabela para sess√µes ativas por dispositivo
        const createDeviceSessionsTable = `
            CREATE TABLE IF NOT EXISTS device_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                device_id TEXT NOT NULL,
                session_token TEXT UNIQUE NOT NULL,
                refresh_token TEXT UNIQUE,
                expires_at DATETIME NOT NULL,
                last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
                FOREIGN KEY (device_id) REFERENCES user_devices (device_id) ON DELETE CASCADE
            )
        `;
        
        // Tabela para sincroniza√ß√£o de dados entre dispositivos
        const createSyncDataTable = `
            CREATE TABLE IF NOT EXISTS sync_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                data_type TEXT NOT NULL, -- 'profile', 'settings', 'preferences'
                data_key TEXT NOT NULL,
                data_value TEXT,
                device_id TEXT, -- dispositivo que fez a √∫ltima altera√ß√£o
                version INTEGER DEFAULT 1,
                last_modified DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
                UNIQUE(user_id, data_type, data_key)
            )
        `;
        
        // Tabela para notifica√ß√µes push entre dispositivos
        const createSyncNotificationsTable = `
            CREATE TABLE IF NOT EXISTS sync_notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                target_device_id TEXT, -- NULL para todos os dispositivos
                notification_type TEXT NOT NULL, -- 'profile_update', 'password_change', 'logout_all'
                message TEXT,
                data TEXT, -- JSON com dados adicionais
                is_read BOOLEAN DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
            )
        `;
        
        // Executa as cria√ß√µes das tabelas
        await db.run(createDevicesTable);
        console.log('‚úÖ Tabela user_devices criada com sucesso.');
        
        await db.run(createDeviceSessionsTable);
        console.log('‚úÖ Tabela device_sessions criada com sucesso.');
        
        await db.run(createSyncDataTable);
        console.log('‚úÖ Tabela sync_data criada com sucesso.');
        
        await db.run(createSyncNotificationsTable);
        console.log('‚úÖ Tabela sync_notifications criada com sucesso.');
        
        console.log('\nüéâ Sistema de sincroniza√ß√£o entre dispositivos configurado com sucesso!');
        console.log('\nüì± Funcionalidades dispon√≠veis:');
        console.log('   ‚Ä¢ Gerenciamento de m√∫ltiplos dispositivos por usu√°rio');
        console.log('   ‚Ä¢ Sess√µes independentes por dispositivo');
        console.log('   ‚Ä¢ Sincroniza√ß√£o autom√°tica de dados');
        console.log('   ‚Ä¢ Notifica√ß√µes entre dispositivos');
        console.log('   ‚Ä¢ Controle de atividade e √∫ltima sincroniza√ß√£o');
        
    } catch (error) {
        console.error('‚ùå Erro ao criar tabelas de sincroniza√ß√£o:', error.message);
        throw error;
    }
}

// Executa o script se chamado diretamente
if (require.main === module) {
    createDeviceSyncTables()
        .then(() => {
            console.log('\n‚úÖ Script executado com sucesso!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Erro na execu√ß√£o:', error);
            process.exit(1);
        });
}

module.exports = { createDeviceSyncTables };